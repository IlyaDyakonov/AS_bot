import requests
import bs4
import lxml
import time
import telebot
from telebot import types
import threading


TOKEN = '–¢–£–¢ –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù Telegram Bot'
bot = telebot.TeleBot(TOKEN)

url_1 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/multi_pasta_smart_15ml.html"
url_2 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/multi_pasta_smart_150_ml.html"
url_3 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/umnyy_balzam_dlya_bystrogo_vosstanovleniya_kozhi_15ml.html"
url_4 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/umnyy_balzam_dlya_bystrogo_vosstanovleniya_kozhi_150_ml.html"

url_test = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/umnyy_eliksir_dlya_vosstanovleniya_volos_kozhi_golovy_brovey_i_resnits_30_ml.html"

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ü§ñ")

def start_check(url):
    res = requests.get(url)
    html_data = res.text
    soup = bs4.BeautifulSoup(html_data, 'lxml')
    divs_availability = soup.find_all('div', class_='row available-block')
    result = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    for div in divs_availability:
        answer = div.text.strip()
        if answer == result:
            return "–ü–∞—Å—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç =("
        else:
            divs_price = soup.find_all('div', class_='qtyBlockContainer')
            for price in divs_price:
                input_tag = price.find('input', class_='qty')
                data_max_quantity = input_tag.get('data-max-quantity')
                return f"–¢–æ–≤–∞—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ ^_^\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {data_max_quantity} —à—Ç—É–∫."
        break

answer = "–ü–∞—Å—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç =("


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder="–¢—ã–∫–∞–π —Å–≤–æ–∏ –∫–Ω–æ–ø–æ—á–∫–∏, —Ö–∞–≤–Ω—é–∫ =)")
    row1 = []
    row2 = []
    button_help(row1)
    check_button(row2)
    markup.add(*row1, *row2)

    stop_check(markup)

    row3 = []
    row4 = []
    check_button_start_small_pasta(row3)
    check_button_start_big_pasta(row4)
    markup.add(*row3, *row4)

    row5 = []
    row6 = []
    check_button_start_small_balzam(row5)
    check_button_start_big_balzam(row6)
    markup.add(*row5, *row6)

    check_button_start_two_pasta(markup)

    check_button_start_two_balzam(markup)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ Smart Master ü§ñ", reply_markup=markup)

# –Ω–∏–∂–µ –∏–¥—ë—Ç –∫–æ–¥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
def button_help(markup):
    help_button = types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    markup.append(help_button)

def stop_check(markup):
    stop_check_button = types.KeyboardButton("üìõ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
    markup.add(stop_check_button)

def check_button(markup):
    check_button = types.KeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–ª–∏—á–∏–µ")
    markup.append(check_button)

def check_button_start_small_pasta(markup):
    start_button_small_pasta = types.KeyboardButton("ü§è –ü–∞—Å—Ç–∞ 15–º–ª", request_contact=False, request_location=False)
    markup.append(start_button_small_pasta)

def check_button_start_big_pasta(markup):
    start_button_big_pasta = types.KeyboardButton("üí™ –ü–∞—Å—Ç–∞ 150–º–ª", request_contact=False, request_location=False)
    markup.append(start_button_big_pasta)

def check_button_start_small_balzam(markup):
    start_button_small_balzam = types.KeyboardButton("ü§èüèΩ –ë–∞–ª—å–∑–∞–º 15–º–ª", request_contact=False, request_location=False)
    markup.append(start_button_small_balzam)

def check_button_start_big_balzam(markup):
    start_button_big_balzam = types.KeyboardButton("üí™üèΩ –ë–∞–ª—å–∑–∞–º 150–º–ª", request_contact=False, request_location=False)
    markup.append(start_button_big_balzam)

def check_button_start_two_pasta(markup):
    start_button_two_pasta = types.KeyboardButton("üåì –ü–∞—Å—Ç—ã 15–º–ª –∏ 150–º–ª", request_contact=False, request_location=False)
    markup.add(start_button_two_pasta)

def check_button_start_two_balzam(markup):
    start_button_two_balzam = types.KeyboardButton("üåó –ë–∞–ª—å–∑–∞–º—ã 15–º–ª –∏ 150–º–ª", request_contact=False, request_location=False)
    markup.add(start_button_two_balzam)

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - —Ñ–ª–∞–≥–∏
stop_parsing_flag = False
is_checking_small_pasta = False
is_checking_big_pasta = False
is_checking_two_pasta = False
is_checking_small_balzam = False
is_checking_big_balzam = False
is_checking_two_balzam = False
timer = None
timer_sleep = 300

# –Ω–∏–∂–µ –∏–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞
@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
def help(message):
    bot.send_message(message.chat.id, f"""
                    ‚ùì ***–ü–æ–º–æ—â—å*** - –≤—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏ üëª\n\nüìõ ***–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å*** - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–æ–±—â–µ _–≤—Å–µ—Ö_ –ø–∞—Ä—Å–∏–Ω–≥–æ–≤.\n\nüïµÔ∏è‚Äç‚ôÇÔ∏è ***–ù–∞–ª–∏—á–∏–µ*** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.\n\nü§è ***–ü–∞—Å—Ç–∞ 15–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–º–∞–ª–µ–Ω—å–∫–æ–π_ –ø–∞—Å—Ç—ã.\n\nüí™ ***–ü–∞—Å—Ç–∞ 150–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–±–æ–ª—å—à–æ–π_ –ø–∞—Å—Ç—ã.\n\nüåì **–ü–∞—Å—Ç—ã 15–º–ª –∏ 150–º–ª** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ _–±–æ–ª—å—à–æ–π_ –∏ _–º–∞–ª–µ–Ω—å–∫–æ–π_ –ø–∞—Å—Ç.\n\nü§èüèΩ ***–ë–∞–ª—å–∑–∞–º 15–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–º–∞–ª–µ–Ω—å–∫–æ–≥–æ_ –±–∞–ª—å–∑–∞–º–∞.\n\nüí™üèΩ ***–ë–∞–ª—å–∑–∞–º 150–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–±–æ–ª—å—à–æ–≥–æ_ –±–∞–ª—å–∑–∞–º–∞.\n\nüåó **–ë–∞–ª—å–∑–∞–º—ã 15–º–ª –∏ 150–º–ª** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ _–±–æ–ª—å—à–æ–≥–æ_ –∏ _–º–∞–ª–µ–Ω—å–∫–æ–≥–æ_ –±–∞–ª—å–∑–∞–º–∞.\n\n‚ö†Ô∏è**–í–ù–ò–ú–ê–ù–ò–ï!**‚ö†Ô∏è –†–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ _–æ–¥–∏–Ω_ –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –≤—Å–µ—Ö! –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫–æ–π *–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å* —Ä–∞–±–æ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –§–∏–∫—Å–∏–∫–æ–≤ üëæ =)""", parse_mode= "Markdown")

@bot.message_handler(func=lambda message: message.text == "üìõ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
def stop_parsing(message):
    global stop_parsing_flag, is_checking_big_pasta, is_checking_small_pasta, is_checking_two_pasta, timer, is_checking_big_balzam, is_checking_small_balzam, is_checking_two_balzam
    stop_parsing_flag = True
    is_checking_small_pasta = False
    is_checking_big_pasta = False
    is_checking_two_pasta = False
    is_checking_small_balzam = False
    is_checking_big_balzam = False
    is_checking_two_balzam = False
    bot.send_message(message.chat.id, f"–ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è!üçø\n–§–∏–∫—Å–∏–∫–∞–º –Ω–∞–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç—ã –∏ —É–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ!üßò‚Äç‚ôÇÔ∏èüßò‚Äç‚ôÄÔ∏è\n\n–ü—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥.....‚è≥")
    if timer:
        timer.join()  # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        timer = None
    bot.send_message(message.chat.id, f"–í–µ—Å—å –ø–∞—Ä—Å–∏–Ω–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!‚úÖ\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!üç®\n–§–∏–∫—Å–∏–∫–∏ –∂–¥—É—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π!üßüüßü‚Äç‚ôÄÔ∏èüßü‚Äç‚ôÇÔ∏è")


@bot.message_handler(func=lambda message: message.text == "üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–ª–∏—á–∏–µ")
def one_check(message):
        availability_1 = start_check(url_1)
        availability_2 = start_check(url_2)
        availability_3 = start_check(url_3)
        availability_4 = start_check(url_4)
        bot.send_message(message.chat.id, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_1}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 15–º–ª: {url_1}\n\n\n{availability_2}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 150–º–ª: {url_2}\n\n\n{availability_3}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º 15–º–ª: {url_3}\n\n\n{availability_4}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º 150–º–ª: {url_4}")

# –¥–∞–ª—å—à–µ –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞.
# –∏–∑–±–∞–≤–∏–º—Å—è –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, —É–∫–∞–∑–∞–Ω–∏–µ –∫–∞–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.
def check_products_parsing_status(message):
    status_messages = {
        "is_checking_small_pasta": "–ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Å—Ç—ã 15–º–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.",
        "is_checking_big_pasta": "–ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Å—Ç—ã 150–º–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.",
        "is_checking_two_pasta": "–ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Å—Ç—ã 15–º–ª –∏ 150–º–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.",
        "is_checking_small_balzam": "–ü–∞—Ä—Å–∏–Ω–≥ –±–∞–ª—å–∑–∞–º–∞ 15–º–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.",
        "is_checking_big_balzam": "–ü–∞—Ä—Å–∏–Ω–≥ –±–∞–ª—å–∑–∞–º–∞ 150–º–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.",
        "is_checking_two_balzam": "–ü–∞—Ä—Å–∏–Ω–≥ –±–∞–ª—å–∑–∞–º–∞ 15–º–ª –∏ 150–º–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
    }
    for product_type, status_message in status_messages.items():
        if globals()[f'{product_type}']:
            bot.send_message(message.chat.id, status_message)
            return False
    return True

# –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
@bot.message_handler(func=lambda message: message.text in ["ü§è –ü–∞—Å—Ç–∞ 15–º–ª", "üí™ –ü–∞—Å—Ç–∞ 150–º–ª", "ü§èüèΩ –ë–∞–ª—å–∑–∞–º 15–º–ª", "üí™üèΩ –ë–∞–ª—å–∑–∞–º 150–º–ª"])
def check_products_pasta_handler(message):
    product_types = {
        "ü§è –ü–∞—Å—Ç–∞ 15–º–ª": ("small_pasta", "–ø–∞—Å—Ç—ã 15–º–ª", url_1),
        "üí™ –ü–∞—Å—Ç–∞ 150–º–ª": ("big_pasta", "–ø–∞—Å—Ç—ã 150–º–ª", url_2),
        "ü§èüèΩ –ë–∞–ª—å–∑–∞–º 15–º–ª": ("small_balzam", "–±–∞–ª—å–∑–∞–º–∞ 15–º–ª", url_3),
        "üí™üèΩ –ë–∞–ª—å–∑–∞–º 150–º–ª": ("big_balzam", "–±–∞–ª—å–∑–∞–º–∞ 150–º–ª", url_4),
    }
    product_type, product_name, url = product_types.get(message.text)
    print(message.text)
    check_products_pasta(message, product_type, product_name, url)

def check_products_pasta(message, product_type, product_name, url):
    global stop_parsing_flag, is_checking_big_pasta, is_checking_small_pasta, is_checking_two_pasta, timer, is_checking_big_balzam, is_checking_small_balzam, is_checking_two_balzam

    if not check_products_parsing_status(message):
        return

    bot.send_message(message.chat.id, f"–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–∞—Ä—Å–∏–Ω–≥ {product_name}.")
    globals()[f'is_checking_{product_type}'] = True
    stop_parsing_flag = False

    def parsing_loop():
        while not stop_parsing_flag:
            time.sleep(timer_sleep)
            availability = start_check(url)
            if availability == answer:
                pass
                # bot.send_message(message.chat.id, f"test {product_name}")
            else:
                bot.send_message(message.chat.id, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n{availability}\n—ç—Ç–æ {product_name}: {url}")
                break

    timer = threading.Thread(target=parsing_loop)
    timer.start()


@bot.message_handler(func=lambda message: message.text == "üåì –ü–∞—Å—Ç—ã 15–º–ª –∏ 150–º–ª")
def check_products_two_pasta(message):
    global stop_parsing_flag, is_checking_big_pasta, is_checking_small_pasta, is_checking_two_pasta, timer, is_checking_big_balzam, is_checking_small_balzam, is_checking_two_balzam
    if not check_products_parsing_status(message):
        return

    bot.send_message(message.chat.id, f"–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Å—Ç 15–º–ª –∏ 150–º–ª.")
    is_checking_two_pasta = True
    stop_parsing_flag = False
    def parsing_loop():
        while not stop_parsing_flag:
            time.sleep(timer_sleep)
            availability_1 = start_check(url_1)
            availability_2 = start_check(url_2)
            if availability_1 != answer or availability_2 != answer:
                bot.send_message(message.chat.id, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_1}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 15–º–ª: {url_1}\n\n\n{availability_2}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 150–º–ª: {url_2}")
                break
            else:
                pass
                # bot.send_message(message.chat.id, f"test 15 and 150 pasta")
    timer = threading.Thread(target=parsing_loop)
    timer.start()


@bot.message_handler(func=lambda message: message.text == "üåó –ë–∞–ª—å–∑–∞–º—ã 15–º–ª –∏ 150–º–ª")
def check_products_two_balzam(message):
    global stop_parsing_flag, is_checking_big_pasta, is_checking_small_pasta, is_checking_two_pasta, timer, is_checking_big_balzam, is_checking_small_balzam, is_checking_two_balzam
    if not check_products_parsing_status(message):
        return

    bot.send_message(message.chat.id, f"–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –±–∞–ª—å–∑–∞–º–æ–≤ 15–º–ª –∏ 150–º–ª.")
    is_checking_two_balzam = True
    stop_parsing_flag = False
    def parsing_loop():
        while not stop_parsing_flag:
            time.sleep(timer_sleep)
            availability_1 = start_check(url_3)
            availability_2 = start_check(url_4)
            if availability_1 != answer or availability_2 != answer:
                bot.send_message(message.chat.id, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_1}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º 15–º–ª: {url_3}\n\n\n{availability_2}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º 150–º–ª: {url_4}")
                break
            else:
                pass
                # bot.send_message(message.chat.id, f"test 15 and 150 balzam")
    timer = threading.Thread(target=parsing_loop)
    timer.start()

bot.polling()
