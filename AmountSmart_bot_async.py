from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
import aiogram.exceptions
import requests
import bs4
import aiohttp
import asyncio
import logging
import sys


TOKEN = "–¢–£–¢ –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù Telegram Bot"
dp = Dispatcher()

url_1 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/multi_pasta_smart_15ml.html"
url_2 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/multi_pasta_smart_150_ml.html"
url_3 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/lechebnoe_maslo_smart_organic_oil_30_ml.html"
url_4 = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/umnyy_balzam_dlya_bystrogo_vosstanovleniya_kozhi_150_ml.html"

url_test = "https://smart-pilka.ru/catalog/professionalnaya_kosmetika/umnyy_eliksir_dlya_vosstanovleniya_volos_kozhi_golovy_brovey_i_resnits_30_ml.html"

async def start_check(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                res = requests.get(url)
                html_data = res.text
                soup = bs4.BeautifulSoup(html_data, 'lxml')
                divs_availability = soup.find_all('div', class_='row available-block')
                result = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                for div in divs_availability:
                    answer = div.text.strip()
                    if answer == result:
                        return "–¢–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç :("
                    else:
                        divs_price = soup.find_all('div', class_='qtyBlockContainer')
                        for price in divs_price:
                            input_tag = price.find('input', class_='qty')
                            data_max_quantity = input_tag.get('data-max-quantity')
                            return f"–¢–æ–≤–∞—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ ^_^\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {data_max_quantity} —à—Ç—É–∫."
                    break

answer = "–¢–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç :("

def create_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data='help_button'),
            InlineKeyboardButton(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–ª–∏—á–∏–µ", callback_data='check_button')
        ],
        [
            InlineKeyboardButton(text="üõ†Ô∏è –ü–∞—Ä—Å–µ—Ä—ã –≤ —Ä–∞–±–æ—Ç–µ", callback_data='pars_job')
        ],
        [
            InlineKeyboardButton(text="üìõ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –§–∏–∫—Å–∏–∫–æ–≤)", callback_data='stop_button')
        ],
        [
            InlineKeyboardButton(text="ü§è –ü–∞—Å—Ç–∞ 15–º–ª", callback_data='small_pasta'),
            InlineKeyboardButton(text="üí™ –ü–∞—Å—Ç–∞ 150–º–ª", callback_data='big_pasta')
        ],
        [
            InlineKeyboardButton(text="üçº –ú–∞—Å–ª–æ 30–º–ª", callback_data='small_balzam'),
            InlineKeyboardButton(text="üç∑ –ë–∞–ª—å–∑–∞–º 150–º–ª", callback_data='big_balzam')
        ],
    ])


    # –∫–Ω–æ–ø–∫–∞ ‚ùì –ü–æ–º–æ—â—å
@dp.callback_query(lambda query: query.data == 'help_button')
async def process_help_command(call: CallbackQuery):
    await help_command(call.message)
    await call.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞

    # –∫–Ω–æ–ø–∫–∞ üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–ª–∏—á–∏–µ
@dp.callback_query(lambda query: query.data == 'check_button')
async def process_one_check(call: CallbackQuery):
    await one_check(call.message)
    await call.answer()

    # –∫–Ω–æ–ø–∫–∞ üõ†Ô∏è –ü–∞—Ä—Å–µ—Ä—ã –≤ —Ä–∞–±–æ—Ç–µ
@dp.callback_query(lambda query: query.data == 'pars_job')
async def process_print_active_parser(call: CallbackQuery):
    await print_active_parser(call.message)
    await call.answer()

    # –∫–Ω–æ–ø–∫–∞ üìõ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
@dp.callback_query(lambda query: query.data == 'stop_button')
async def process_stop_parsing(call: CallbackQuery):
    await stop_parsing(call.message)
    await call.answer()

    # –∫–Ω–æ–ø–∫–∞ ü§è –ü–∞—Å—Ç–∞ 15–º–ª
@dp.callback_query(lambda query: query.data == 'small_pasta')
async def process_check_products_handler1(call: CallbackQuery):
    await check_products_small_pasta(call.message)
    await call.answer()

    # –∫–Ω–æ–ø–∫–∞ üí™ –ü–∞—Å—Ç–∞ 150–º–ª
@dp.callback_query(lambda query: query.data == 'big_pasta')
async def process_check_products_handler2(call: CallbackQuery):
    await check_products_big_pasta(call.message)
    await call.answer()

    # –∫–Ω–æ–ø–∫–∞ üçº –ú–∞—Å–ª–æ 30–º–ª
@dp.callback_query(lambda query: query.data == 'small_balzam')
async def process_check_products_handler3(call: CallbackQuery):
    await check_products_small_balzam(call.message)
    await call.answer()

    # –∫–Ω–æ–ø–∫–∞ üç∑ –ë–∞–ª—å–∑–∞–º 150–º–ª
@dp.callback_query(lambda query: query.data == 'big_balzam')
async def process_check_products_handler4(call: CallbackQuery):
    await check_products_big_balzam(call.message)
    await call.answer()

# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def on_startup(message: Message):
    markup = create_keyboard()

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç ***{message.from_user.first_name}!*** üëã \n–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ Smart Master ü§ñ\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É '‚ùì –ü–æ–º–æ—â—å' –∏ –ø—Ä–æ—á–∏—Ç–∞–π —Å–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ!", parse_mode= "Markdown", reply_markup=markup)

    await message.answer_sticker('CAACAgIAAxkBAAIHG2T-IYEAAc4d4bsfPOoizGVDkFuJygACOAsAAk7kmUsysUfS2U-M0DAE')

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - —Ñ–ª–∞–≥–∏
# —Ñ–ª–∞–≥ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–∞–π—Ç
timer_sleep = 300

@dp.message(Command('help'))
async def help_command(message: Message):
    markup = create_keyboard()
    await message.answer(
                    f"‚ùì ***–ü–æ–º–æ—â—å*** - –≤—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏ üëª\n\n"
                    f"üïµÔ∏è‚Äç‚ôÇÔ∏è ***–ù–∞–ª–∏—á–∏–µ*** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.\n\n"
                    f"üõ†Ô∏è ***–ü–∞—Ä—Å–µ—Ä—ã –≤ —Ä–∞–±–æ—Ç–µ*** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–∏–µ –ø–∞—Ä—Å–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
                    f"üìõ ***–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –§–∏–∫—Å–∏–∫–æ–≤)*** - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–æ–±—â–µ _–í–°–ï–•_ –ø–∞—Ä—Å–∏–Ω–≥–æ–≤.\n\n"
                    f"ü§è ***–ü–∞—Å—Ç–∞ 15–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–º–∞–ª–µ–Ω—å–∫–æ–π_ –ø–∞—Å—Ç—ã.\n\n"
                    f"üí™ ***–ü–∞—Å—Ç–∞ 150–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–±–æ–ª—å—à–æ–π_ –ø–∞—Å—Ç—ã.\n\n"
                    f"üçº ***–ú–∞—Å–ª–æ 30–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–º–∞–ª–µ–Ω—å–∫–æ–≥–æ_ –±–∞–ª—å–∑–∞–º–∞.\n\n"
                    f"üç∑ ***–ë–∞–ª—å–∑–∞–º 150–º–ª*** - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ _–±–æ–ª—å—à–æ–≥–æ_ –±–∞–ª—å–∑–∞–º–∞.\n\n"
                    f"‚ö†Ô∏è**–í–ù–ò–ú–ê–ù–ò–ï!**‚ö†Ô∏è –†–∞–±–æ—Ç–∞—Ç—å –º–æ–≥—É—Ç _–ª—é–±—ã–µ_ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ! –ï—Å–ª–∏ –í–∞–º –Ω–∞–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–∏–Ω–≥–æ–≤, –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–∫–æ–π –ª–∏–±–æ –∏–∑ –Ω–∏—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫–æ–π ***–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å*** —Ä–∞–±–æ—Ç—É _–í–°–ï–•_ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –§–∏–∫—Å–∏–∫–æ–≤, –∞ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã üëæ =)", parse_mode= "Markdown", reply_markup=markup)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–ª–∏—á–∏–µ
@dp.message()
async def one_check(message: Message):
    markup = create_keyboard()
    await message.answer(f"–°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–µ–∫—É–Ω–¥—É...üßÆ")
    availability_1 = await start_check(url_1)
    availability_2 = await start_check(url_2)
    availability_3 = await start_check(url_3)
    availability_4 = await start_check(url_4)
    await message.answer(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_1}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 15–º–ª: {url_1}\n\n\n"
                        f"{availability_2}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 150–º–ª: {url_2}\n\n\n"
                        f"{availability_3}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ú–∞—Å–ª–æ 30–º–ª: {url_3}\n\n\n"
                        f"{availability_4}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º 150–º–ª: {url_4}",
                        reply_markup=markup)

# —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
user_states = {}

# –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
@dp.message(Command('stop'))
async def stop_parsing(message: Message):
    chat_id = message.chat.id
    for user_id in user_states:
        if user_id == chat_id:
            if ('stop_pars_small_pasta' in user_states[user_id] and user_states[user_id]['stop_pars_small_pasta'] == True) and ('stop_pars_big_pasta' in user_states[user_id] and user_states[user_id]['stop_pars_big_pasta'] == True) and ('stop_pars_small_oil' in user_states[user_id] and user_states[user_id]['stop_pars_small_oil'] == True) and ('stop_pars_big_balzam' in user_states[user_id] and user_states[user_id]['stop_pars_big_balzam'] == True):
                await message.answer(f"–§–∏–∫—Å–∏–∫–∏ –æ—Ç–¥—ã—Ö–∞—é—Ç üò∏")
                break
            try:
                if chat_id in user_states:
                    user_states[chat_id]['stop_pars_small_pasta'] = True
                    user_states[chat_id]['stop_pars_big_pasta'] = True
                    user_states[chat_id]['stop_pars_small_oil'] = True
                    user_states[chat_id]['stop_pars_big_balzam'] = True
                else:
                    user_states[chat_id] = {'stop_pars_small_pasta': True}
                    user_states[chat_id] = {'stop_pars_big_pasta': True}
                    user_states[chat_id] = {'stop_pars_small_oil': True}
                    user_states[chat_id] = {'stop_pars_big_balzam': True}
                await message.answer(f"–ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è!üçø\n–§–∏–∫—Å–∏–∫–∞–º –Ω–∞–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç—ã –∏ —É–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ!üßò‚Äç‚ôÇÔ∏èüßò‚Äç‚ôÄÔ∏è\n\n–ü—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω......‚è≥")
            except aiogram.exceptions.TelegramBadRequest as e:
                if "TelegramBadRequest" in str(e) or "aiogram.exceptions.TelegramBadRequest" in str(e):
                    pass
                else:
                    print("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")

# —Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∏–µ –ø–∞—Ä—Å–µ—Ä—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç
@dp.message()
async def print_active_parser(message: Message):
    active_functions = []
    chat_id = message.chat.id

    for user_id in user_states:
        if user_id == chat_id:
            if 'stop_pars_small_pasta' in user_states[user_id] and user_states[user_id]['stop_pars_small_pasta'] == False:
                active_functions.append('–ó–∞–ø—É—â–µ–Ω–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ ü§è –°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 15–º–ª')

            if 'stop_pars_big_pasta' in user_states[user_id] and user_states[user_id]['stop_pars_big_pasta'] == False:
                active_functions.append('–ó–∞–ø—É—â–µ–Ω–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ üí™ –°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 150–º–ª')

            if 'stop_pars_small_oil' in user_states[user_id] and user_states[user_id]['stop_pars_small_oil'] == False:
                active_functions.append('–ó–∞–ø—É—â–µ–Ω–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ üçº–°–º–∞—Ä—Ç –ú–∞—Å–ª–∞ 30–º–ª')

            if 'stop_pars_big_balzam' in user_states[user_id] and user_states[user_id]['stop_pars_big_balzam'] == False:
                active_functions.append('–ó–∞–ø—É—â–µ–Ω–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ üç∑–°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º–∞ 150–º–ª')

    if active_functions:
        active_functions_text = "\n".join(active_functions)
        await message.answer(f'***–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:***\nüëá\n{active_functions_text}', parse_mode= "Markdown")
    else:
        await message.answer(f"–§–∏–∫—Å–∏–∫–∏ –æ—Ç–¥—ã—Ö–∞—é—Ç üò∏")

# —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ small_pasta
@dp.message()
async def check_products_small_pasta(message: Message):
    markup = create_keyboard()
    chat_id = message.chat.id

    if chat_id in user_states and 'stop_pars_small_pasta' in user_states[chat_id] and not user_states[chat_id]['stop_pars_small_pasta']:
        await message.answer(f'–ü–∞—Ä—Å–µ—Ä üí™ ***–°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 15–º–ª*** _—É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è_!', parse_mode= "Markdown")
    else:
        if chat_id in user_states:
            user_states[chat_id]['stop_pars_small_pasta'] = False
        else:
            user_states[chat_id] = {'stop_pars_small_pasta': False}
        await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ ***–°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 15–º–ª*** –∑–∞–ø—É—â–µ–Ω!', parse_mode= "Markdown")
        while True:
            try:
                if user_states[chat_id]['stop_pars_small_pasta']:
                    await message.answer(f"–ü–∞—Ä—Å–∏–Ω–≥ ü§è***–°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 15–º–ª*** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!‚úÖ\n–§–∏–∫—Å–∏–∫–∏ –∂–¥—É—Ç –Ω–æ–≤—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π!üßüüßü‚Äç‚ôÄÔ∏èüßü‚Äç‚ôÇÔ∏è", parse_mode= "Markdown", reply_markup=markup)
                    break
                else:
                    await asyncio.sleep(timer_sleep)
                    availability_1 = await start_check(url_1)
                    if availability_1 == answer:
                        # await message.answer(f'pasta test 15')
                        pass
                    else:
                        await message.answer(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_1}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 150–º–ª: {url_1}', reply_markup=markup)
                        user_states[chat_id]['stop_pars_small_pasta'] = True
                        break
            except aiogram.exceptions.TelegramBadRequest as e:
                if "TelegramBadRequest" in str(e) or "aiogram.exceptions.TelegramBadRequest" in str(e):
                    break
                else:
                    print("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
                    break

# —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ big_pasta
@dp.message()
async def check_products_big_pasta(message: Message):
    markup = create_keyboard()
    chat_id = message.chat.id

    if chat_id in user_states and 'stop_pars_big_pasta' in user_states[chat_id] and not user_states[chat_id]['stop_pars_big_pasta']:
        await message.answer(f'–ü–∞—Ä—Å–µ—Ä üí™ ***–°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 150–º–ª*** _—É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è_!', parse_mode= "Markdown")
    else:
        if chat_id in user_states:
            user_states[chat_id]['stop_pars_big_pasta'] = False
        else:
            user_states[chat_id] = {'stop_pars_big_pasta': False}
        await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ ***–°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 150–º–ª*** –∑–∞–ø—É—â–µ–Ω!', parse_mode= "Markdown")
        while True:
            try:
                if user_states[chat_id]['stop_pars_big_pasta']:
                    await message.answer(f"–ü–∞—Ä—Å–∏–Ω–≥ üí™***–°–º–∞—Ä—Ç –ü–∞—Å—Ç—ã 150–º–ª*** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!‚úÖ\n–§–∏–∫—Å–∏–∫–∏ –∂–¥—É—Ç –Ω–æ–≤—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π!üßüüßü‚Äç‚ôÄÔ∏èüßü‚Äç‚ôÇÔ∏è", parse_mode= "Markdown", reply_markup=markup)
                    break
                else:
                    await asyncio.sleep(timer_sleep)
                    availability_2 = await start_check(url_2)
                    if availability_2 == answer:
                        # await message.answer(f'pasta test 150')
                        pass
                    else:
                        await message.answer(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_2}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 150–º–ª: {url_2}', reply_markup=markup)
                        user_states[chat_id]['stop_pars_big_pasta'] = True
                        break
            except aiogram.exceptions.TelegramBadRequest as e:
                if "TelegramBadRequest" in str(e) or "aiogram.exceptions.TelegramBadRequest" in str(e):
                    break
                else:
                    print("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
                    break

# —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ small_balzam
@dp.message()
async def check_products_small_balzam(message: Message):
    markup = create_keyboard()
    chat_id = message.chat.id

    if chat_id in user_states and 'stop_pars_small_oil' in user_states[chat_id] and not user_states[chat_id]['stop_pars_small_oil']:
        await message.answer(f'–ü–∞—Ä—Å–µ—Ä üí™ ***–°–º–∞—Ä—Ç –ú–∞—Å–ª–∞ 30–º–ª*** _—É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è_!', parse_mode= "Markdown")
    else:
        if chat_id in user_states:
            user_states[chat_id]['stop_pars_small_oil'] = False
        else:
            user_states[chat_id] = {'stop_pars_small_oil': False}
        await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ ***–°–º–∞—Ä—Ç –ú–∞—Å–ª–∞ 30–º–ª*** –∑–∞–ø—É—â–µ–Ω!', parse_mode= "Markdown")
        while True:
            try:
                if user_states[chat_id]['stop_pars_small_oil']:
                    await message.answer(f"–ü–∞—Ä—Å–∏–Ω–≥ üçº***–°–º–∞—Ä—Ç –ú–∞—Å–ª–∞ 30–º–ª*** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!‚úÖ\n–§–∏–∫—Å–∏–∫–∏ –∂–¥—É—Ç –Ω–æ–≤—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π!üßüüßü‚Äç‚ôÄÔ∏èüßü‚Äç‚ôÇÔ∏è", parse_mode= "Markdown", reply_markup=markup)
                    break
                else:
                    await asyncio.sleep(timer_sleep)
                    availability_3 = await start_check(url_3)
                    if availability_3 == answer:
                        # await message.answer(f'oil test 30')
                        pass
                    else:
                        await message.answer(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_3}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 150–º–ª: {url_3}', reply_markup=markup)
                        user_states[chat_id]['stop_pars_small_oil'] = True
                        break
            except aiogram.exceptions.TelegramBadRequest as e:
                if "TelegramBadRequest" in str(e) or "aiogram.exceptions.TelegramBadRequest" in str(e):
                    break
                else:
                    print("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
                    break

# —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ big_balzam
@dp.message()
async def check_products_big_balzam(message: Message):
    markup = create_keyboard()
    chat_id = message.chat.id

    if chat_id in user_states and 'stop_pars_big_balzam' in user_states[chat_id] and not user_states[chat_id]['stop_pars_big_balzam']:
            await message.answer(f'–ü–∞—Ä—Å–µ—Ä üí™ ***–°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º–∞ 150–º–ª*** _—É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è_!', parse_mode= "Markdown")
    else:
        if chat_id in user_states:
            user_states[chat_id]['stop_pars_big_balzam'] = False
        else:
            user_states[chat_id] = {'stop_pars_big_balzam': False}
        await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ ***–°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º–∞ 150–º–ª*** –∑–∞–ø—É—â–µ–Ω!', parse_mode= "Markdown")
        while True:
            try:
                if user_states[chat_id]['stop_pars_big_balzam']:
                    await message.answer(f"–ü–∞—Ä—Å–∏–Ω–≥ üç∑***–°–º–∞—Ä—Ç –ë–∞–ª—å–∑–∞–º–∞ 150–º–ª*** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!‚úÖ\n–§–∏–∫—Å–∏–∫–∏ –∂–¥—É—Ç –Ω–æ–≤—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π!üßüüßü‚Äç‚ôÄÔ∏èüßü‚Äç‚ôÇÔ∏è", parse_mode= "Markdown", reply_markup=markup)
                    break
                else:
                    await asyncio.sleep(timer_sleep)
                    availability_4 = await start_check(url_4)
                    if availability_4 == answer:
                        # await message.answer(f'balzam test 150')
                        pass
                    else:
                        await message.answer(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{availability_4}\n—ç—Ç–æ –°–º–∞—Ä—Ç –ü–∞—Å—Ç–∞ 150–º–ª: {url_4}', reply_markup=markup)
                        user_states[chat_id]['stop_pars_big_balzam'] = True
                        break
            except aiogram.exceptions.TelegramBadRequest as e:
                if "TelegramBadRequest" in str(e) or "aiogram.exceptions.TelegramBadRequest" in str(e):
                    break
                else:
                    print("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
                    break


async def main() -> None:
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logging.basicConfig(level=logging.INFO, stream=sys.stdout)
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
